{
	"type": "column_value",
	"script": [
		"for (StructureStart start in structures:",
			"if (start.structure.isIn('bigglobe:lakes'):",
				"ScriptStructurePiece piece = start.pieces.(0)",
				"double distance = sqrt((x - piece.midX) ^ 2 + (z - piece.midZ) ^ 2)",
				"double radius = piece.sizeX >> 1",
				"double processedTarget = max(world_traits.`bigglobe:automatic_surface_y`(start.minY), piece.maxY)",
				"double snowTarget = min(world_traits.`bigglobe:automatic_snow_y`(start.minY), piece.maxY - 0.5L)",
				"if (distance < radius:",
					"double fraction = (1.0L - (distance / radius) ^ 2) ^ 2",
					"world_traits.`bigglobe:automatic_snow_y`(start.minY) = mixLinear(snowTarget, piece.minY, fraction)",
					"fraction *= Grid2D('bigglobe:lake_noise').getValue(x, z)",
					"world_traits.`bigglobe:automatic_surface_y`(start.minY) = mixLinear(processedTarget, piece.minY, fraction)",

					"float lakeChance = unmixSmooth(piece.maxY, piece.maxY - 4, world_traits.`bigglobe:automatic_surface_y`(start.minY)).as(float)",
					"`bigglobe:overworld/surface_foliage` *= 1.0I - lakeChance,,",
					"(worldSeed # 16x73675EE7D46B59A3UL).newSeed(x, z).if (lakeChance:",
						"`bigglobe:overworld/lake_surface_states` = LakeSurfaceStates.new(",
							"BlockState(piece.data.surface.asString()),",
							"BlockState(piece.data.subsurface.asString())",
						")",
					")",
				")",
				"else if (distance < radius + 16.0L:",
					"double fraction = unmixSmooth(radius, radius + 16.0L, distance)",
					"world_traits.`bigglobe:automatic_surface_y`(start.minY) = mixLinear(processedTarget, world_traits.`bigglobe:automatic_surface_y`(start.minY), fraction)",
					"world_traits.`bigglobe:automatic_snow_y`(start.minY) = mixLinear(snowTarget, world_traits.`bigglobe:automatic_snow_y`(start.minY), fraction)",
				")",
			")",
		")"
	]
}