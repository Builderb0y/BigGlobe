{
	"type": "bigglobe:script",
	"config": {
		"script": [
			"double*(",
				"centerX = originX + random.nextDouble(-0.5, +0.5)",
				"centerY = originY + random.nextDouble(-1.5, -0.5)",
				"centerZ = originZ + random.nextDouble(-0.5, +0.5)",
				"radiusH = random.nextDouble(6.0, 12.0)",
				"radiusV = random.nextDouble(3.0,  6.0)",
			")",
			"int*(",
				"minX =  ceilInt(centerX - radiusH)",
				"minY =  ceilInt(centerY - radiusV)",
				"minZ =  ceilInt(centerZ - radiusH)",
				"maxX = floorInt(centerX + radiusH)",
				"maxY = floorInt(centerY + radiusV)",
				"maxZ = floorInt(centerZ + radiusH)",
			")",

			";check area",
			"for (",
				"int checkX in range[minX, maxX],",
				"int checkZ in range[minZ, maxZ]",
			":",
				"unless (getBlockState(checkX, minY, checkZ).blocksLight(): return(false))",
			")",

			";clear out ellipsoid",
			"double*(rcpH = 1.0L / radiusH, rcpV = 1.0L / radiusV)",
			"boolean caveSpider = random.nextBoolean(0.125)",
			"for (int x in range[minX, maxX]:",
				"double x2 = ((x - centerX) * rcpH) ^ 2",
				"for (int z in range[minZ, maxZ]:",
					"double xz2 = x2 + ((z - centerZ) * rcpH) ^ 2",
					"if (xz2 < 1.0:",
						"for (int y in range[minY, maxY]:",
							"double xyz2 = xz2 + ((y - centerY) * rcpV) ^ 2",
							"if (xyz2 < 1.0:",
								"BlockState oldState = getBlockState(x, y, z)",
								"if (oldState.blocksLight():",
									"setBlockState(x, y, z,",
										"random.nextBoolean(caveSpider ? 0.5 : 0.125)",
										"? 'minecraft:cobweb'",
										": 'minecraft:air'",
									")",
								")",
								"else unless (oldState.isAir():",
									"setBlockState(x, y, z, 'minecraft:air')",
								")",
							")",
						")",
					")",
				")",
			")",

			";place spawner",
			"setBlockState(originX, minY + 2, originZ, 'minecraft:spawner')",
			"mergeBlockData(originX, minY + 2, originZ, nbtCompound(",
				"SpawnData: nbtCompound(",
					"entity: nbtCompound(",
						"id: caveSpider ? 'minecraft:cave_spider' : 'minecraft:spider'",
					")",
				")",
			"))",

			"return(true)"
		]
	}
}