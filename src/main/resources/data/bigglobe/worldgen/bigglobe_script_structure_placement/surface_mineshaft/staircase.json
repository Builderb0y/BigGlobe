{
	"script": [
		"WoodPalette palette = WoodPalette(data.palette.asString())",
		"boolean isStart = data.start.asBoolean()",
		"for (int x = minX, x <= maxX, ++x:",
			"int ideal = (maxX - minX) - (x - minX) + minY - 1",
			"int startY = max(minY + 1, ideal)",
			"int endY = min(maxY - 1, ideal + 4)",

			";roof and walls.",
			"if (isStart:",
				"for (int y = startY - 1, y <= endY, ++y:",
					"if (getBlockState(x, y, minZ).isReplaceable():",
						"setBlockState(x, y, minZ, x == minX ? palette.logState(axis: 'y') : palette.planksState())",
					")",
					"if (getBlockState(x, y, maxZ).isReplaceable():",
						"setBlockState(x, y, maxZ, x == minX ? palette.logState(axis: 'y') : palette.planksState())",
					")",
				")",
				"for (int z = minZ, z <= maxZ, ++z:",
					"if (getBlockState(x, endY + 1, z).isReplaceable():",
						"setBlockState(x, endY + 1, z, x == minX ? palette.logState(axis: 'z') : palette.planksState())",
					")",
				")",
			")",

			";carve out air.",
			"fillBlockState(x, startY, midZ - 1, x, endY, midZ + 1, 'minecraft:air')",

			";ensure we have solid ground below us.",
			"for (int z = midZ - 1, z <= midZ + 1, ++z:",
				"if (getBlockState(x, startY - 1, z).isReplaceable():",
					"setBlockState(x, startY - 1, z, palette.planksState())",
				")",
			")",

			";place stairs and rails if applicable.",
			"boolean flat = x == minX || ideal != startY",
			"unless (flat:",
				"setBlockState(x, startY, midZ - 1, 'minecraft:cobblestone_stairs[facing=west,shape=straight,waterlogged=false]')",
				"setBlockState(x, startY, midZ + 1, 'minecraft:cobblestone_stairs[facing=west,shape=straight,waterlogged=false]')",
			")",
			"setBlockState(x, startY, midZ, BlockState('minecraft:rail', waterlogged: false, shape: flat ? 'east_west' : 'ascending_west'))",

			";board up entrance",
			"if (isStart && x == minX:",
				"fillBlockState(x, startY, midZ - 1, x, endY, midZ + 1, palette.fenceState(north: true, south: true, east: false, west: false, waterlogged: false))",
			")",
		")"
	]
}