{
	"dimensions": {
		"bigglobe:snowflake": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "multi_state_3d",
							"state": [
								"int*(iterX = x, iterY = y, iterZ = z)",
								"int*(moveX = 6, moveY = 6, moveZ = 6)",
								"for (int iteration in -range[0, 5]:",
									"int scale = 3 ^ iteration",
									"int half = (scale - 1) >> 1",
									"if (abs(iterX) > half && abs(iterY) > half && abs(iterZ) > half:",
										"return(null)",
									")",
									"if (abs(iterX) > half: iterX -= sign(iterX) * scale,, moveX = iteration)",
									"if (abs(iterY) > half: iterY -= sign(iterY) * scale,, moveY = iteration)",
									"if (abs(iterZ) > half: iterZ -= sign(iterZ) * scale,, moveZ = iteration)",
								")",
								"return(",
									"switch (max(moveX, moveY, moveZ):",
										"case (0: 'minecraft:purple_concrete')",
										"case (1: 'minecraft:blue_concrete')",
										"case (2: 'minecraft:cyan_concrete')",
										"case (3: 'minecraft:lime_concrete')",
										"case (4: 'minecraft:yellow_concrete')",
										"case (5: 'minecraft:orange_concrete')",
										"case (6: 'minecraft:red_concrete')",
										"default ('minecraft:white_concrete')",
									")",
								")"
							],
							"valid": {
								"where": "max(abs(x), abs(z)) <= (3 ^ 6 - 1) >> 1",
								"min_y": "-((3 ^ 6 - 1) >> 1)",
								"max_y": "(3 ^ 6 - 1) >> 1"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:tetrahedron": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:iron_block'",
							"valid": {
								"min_y": "x # z",
								"max_y": "(x # z) + 1"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:octahedron": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "multi_state_3d",
							"state": [
								"int*(iterX = abs(x), iterY = abs(y), iterZ = abs(z))",
								"int*(moveX = 10, moveY = 10, moveZ = 10)",
								"for (int iteration in -range[0, 9]:",
									"int step = 1 << iteration",
									"if      (iterX > iterY && iterX > iterZ: iterX = abs(iterX - step),, moveX = iteration)",
									"else if (iterY > iterX && iterY > iterZ: iterY = abs(iterY - step),, moveY = iteration)",
									"else if (iterZ > iterX && iterZ > iterY: iterZ = abs(iterZ - step),, moveZ = iteration)",
									"else (break())",
								")",
								"unless(iterX == 0 && iterY == 0 && iterZ == 0: return(null))",
								"return(",
									"switch (max(moveX, moveY, moveZ):",
										"case (2: 'minecraft:blue_concrete')",
										"case (3: 'minecraft:cyan_concrete')",
										"case (4: 'minecraft:green_concrete')",
										"case (5: 'minecraft:lime_concrete')",
										"case (6: 'minecraft:yellow_concrete')",
										"case (7: 'minecraft:orange_concrete')",
										"case (8: 'minecraft:red_concrete')",
										"case (9: 'minecraft:pink_concrete')",
										"default ('minecraft:white_concrete')",
									")",
								")"
							],
							"valid": {
								"where": "abs(x) + abs(z) < 1024",
								"min_y": "abs(x) + abs(z) - 1024",
								"max_y": "1024 - abs(x) - abs(z)"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:menger_sponge": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024
				},
				"layer": {
					"state": "'minecraft:iron_block'",
					"children": [
						{
							"type": "simple_3d",
							"state": "'minecraft:air'",
							"condition": [
								"int*(iterX = abs(x), iterY = abs(y), iterZ = abs(z))",
								"for (int scale in range[0, 20):",
									"if (abs(iterX % 3 - 1) + abs(iterY % 3 - 1) + abs(iterZ % 3 - 1) <= 1:",
										"return(true)",
									")",
									"iterX /= 3",
									"iterY /= 3",
									"iterZ /= 3",
									"if (iterX == 0 && iterY == 0 && iterZ == 0: break())",
								")",
								"return(false)"
							]
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"minecraft:overworld": {
			"type": "minecraft:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -64,
					"max_y": 320,
					"sea_level": 128
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:stone'",
							"valid": {
								"max_y": [
									"double*(height = 0.0L, deltaX = 0.0L, deltaZ = 0.0L)",
									"long seed = worldSeed # 16x1CD6D7C5D97EB6E1UL",
									"for (int iteration in range[0, 512):",
										"double*(",
											"angle = (seed := seed.newSeed()).nextDouble(tau)",
											"phase = (seed := seed.newSeed()).nextDouble(tau)",
											"baseAmplitude = exp(iteration / -128.0L + 4.0L)",
											"unitX = cos(angle)",
											"unitZ = sin(angle)",
											"project = (x * unitX + z * unitZ) / baseAmplitude + phase",
											"adjustedAmplitude = 1.0L - (unitX * deltaX + unitZ * deltaZ) ^ 2 / (deltaX ^ 2 + deltaZ ^ 2 + 16.0L)",
											"deltaProject = -cos(project) * adjustedAmplitude",
										")",
										"height += sin(project) * baseAmplitude * adjustedAmplitude",
										"deltaX += unitX * deltaProject",
										"deltaZ += unitZ * deltaProject",
									")",
									"int(height * 0.0625L + 128.0L)"
								]
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:paradise": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024,
					"sea_level": -256
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:stone'",
							"valid": {
								"max_y": "int(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/mountain_thickness`) + 1"
							},
							"after_children": [
								"int maxStone = int(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/mountain_thickness`)",
								"unless (getBlockState(maxStone).isAir():",
									"int depth = int(`bigglobe:paradise/warp_radius` * 8.0L - `bigglobe:paradise/spiral` * 0.125L + columnSeed(16x0FAC920156B86F94UL).nextDouble(-2.0L, 2.0L) - 4.0L)",
									"if (depth > 0:",
										"int minStone = getBottomOfSegment(maxStone)",
										"setBlockState(maxStone, 'minecraft:grass_block[snowy=false]')",
										"if (depth > 1:",
											"setBlockStates(max(maxStone - depth, minStone), maxStone, 'minecraft:dirt')",
										")",
									")",
								")"
							],
							"children": [
								{
									"type": "simple_2d",
									"state": "'minecraft:air'",
									"valid": {
										"where": "isNotNaN(`bigglobe:paradise/bubble_thickness`)",
										"min_y": "int(`bigglobe:paradise/mountain_center` - 256.0L - `bigglobe:paradise/bubble_thickness`)",
										"max_y": "int(`bigglobe:paradise/mountain_center` - 256.0L + `bigglobe:paradise/bubble_thickness`) + 1"
									},
									"children": [
										{
											"type": "simple_2d",
											"state": "'minecraft:water[level=0]'",
											"valid": {
												"max_y": "-256"
											}
										}
									]
								}
							]
						},
						{
							"type": "simple_3d",
							"state": "'bigglobe:cloud'",
							"condition": "`bigglobe:paradise/upper_ring_cloud_sdf` > 0.0I",
							"valid": {
								"where": [
									"if (purpose == 'heightmap': return(false))",
									"`bigglobe:paradise/warp_radius`.isBetween(`bigglobe:paradise/ring_cloud_min_radius`, `bigglobe:paradise/ring_cloud_max_radius`)"
								],
								"min_y": " ceilInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/ring_cloud_center_offset` - `bigglobe:paradise/ring_cloud_thickness`)",
								"max_y": "floorInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/ring_cloud_center_offset` + `bigglobe:paradise/ring_cloud_thickness`)"
							}
						},
						{
							"type": "simple_3d",
							"state": "'bigglobe:cloud'",
							"condition": "`bigglobe:paradise/upper_bridge_cloud_sdf` > 0.0I",
							"valid": {
								"where": [
									"if (purpose == 'heightmap': return(false))",
									"`bigglobe:paradise/warp_radius` > `bigglobe:paradise/bridge_cloud_min_radius`"
								],
								"min_y": " ceilInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/bridge_cloud_center_offset` - `bigglobe:paradise/bridge_cloud_thickness`)",
								"max_y": "floorInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/bridge_cloud_center_offset` + `bigglobe:paradise/bridge_cloud_thickness`)"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [
						"bigglobe:overworld/cobblestone_sprinkle",
						"bigglobe:overworld/rock_layers/rocks",
						"bigglobe:overworld/rock_layers/dirt"
					],
					"raw": "bigglobe:paradise/raw_root",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:islands": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024,
					"sea_level": 0
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:stone'",
							"valid": {
								"max_y": "ceilInt(`bigglobe:islands/eroded_height`)",
								"min_y": "distantHorizons ? ceilInt(`bigglobe:islands/eroded_height`) - 32 : 16x80000000U"
							},
							"after_children": [
								"int surfaceY = ceilInt(`bigglobe:islands/eroded_height`)",
								"long seed = columnSeed(16x47B481311B32724DUL)",
								"double slopeSquared = (",
									"+ dx(`bigglobe:islands/eroded_height`) ^ 2",
									"+ dz(`bigglobe:islands/eroded_height`) ^ 2",
								")",
								"if ((seed := seed.newSeed()).nextDouble() < unmixSmooth(8.0L, 4.0L, `bigglobe:islands/eroded_height`):",
									"int depth = (seed := seed.newSeed()).nextInt(3, 7)",
									"setBlockStates(surfaceY - depth, surfaceY, 'minecraft:gravel')",
								")",
								"int depth = floorInt(",
									"(seed := seed.newSeed()).nextDouble(3.0L, 7.0L)",
									"- (slopeSquared * 3.0L)",
									"- (surfaceY / 192.0L)",
								")",
								"if (depth > 0:",
									"IslandSurfaceStates states = `bigglobe:islands/surface_states`",
									"boolean hadBlock = false",
									"for (int y in -range[surfaceY - depth, surfaceY):",
										"hadBlock = (getBlockState(y) !=. 'minecraft:air').if (",
											"setBlockState(y, hadBlock ? states.subsurfaceState : states.surfaceState)",
										")",
									")",
								")",
								"if (surfaceY > 0 && (seed := seed.newSeed()).nextFloat() < `bigglobe:islands/snow_chance`:",
									"int snowStart = surfaceY",
									"while (snowStart > minY && getBlockState(snowStart - 1).isAir(): --snowStart)",
									"int snowEnd = lowerInt(`bigglobe:islands/snow_height`)",
									"if (snowEnd >= snowStart:",
										"setBlockStates(snowStart, snowEnd, 'minecraft:snow[layers=8]')",
										"int remaining = floorInt(`bigglobe:islands/snow_height` % 1.0I * 8.0I)",
										"if (snowStart == snowEnd: remaining = max(remaining, 1))",
										"if (remaining != 0:",
											"setBlockState(snowEnd, BlockState('minecraft:snow', layers: remaining))",
										")",
									")",
									"else (",
										"setBlockState(snowStart, 'minecraft:snow[layers=1]')",
									")",
								")"
							]
						},
						{
							"type": "simple_2d",
							"state": "'minecraft:water[level=0]'",
							"valid": {
								"min_y": "ceilInt(`bigglobe:islands/eroded_height`)",
								"max_y": "0"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [
						"bigglobe:overworld/cobblestone_sprinkle",
						"bigglobe:overworld/rock_layers/rocks",
						"bigglobe:overworld/rock_layers/dirt"
					],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		}
	}
}