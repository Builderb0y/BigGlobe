{
	"dimensions": {
		"bigglobe:glitch": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"reload_preset": "experiments",
				"reload_dimension": "bigglobe:glitch",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024,
					"sea_level": 0
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "multi_state_3d",
							"state": [
								"int bias(long seed, int range:",
									"max(seed.nextInt(range), (seed := seed.newSeed(12345)).nextInt(range))",
								")",

								"int mixInt(int*(min, max), double frac:",
									"mixLinear(min.as(double), max.as(double), frac).as(int)",
								")",

								"BlockState test(long seed, int*(recursionDepth, iterX, iterY, iterZ, minX, minY, minZ, maxX, maxY, maxZ):",
									"repeat (recursionDepth:",
										"int*(",
											"midX = mixInt(minX, maxX, (seed := seed.newSeed()).nextDouble(0.25L, 0.75L))",
											"midY = mixInt(minY, maxY, (seed := seed.newSeed()).nextDouble(0.25L, 0.75L))",
											"midZ = mixInt(minZ, maxZ, (seed := seed.newSeed()).nextDouble(0.25L, 0.75L))",

											"minX2 = minX, minY2 = minY, minZ2 = minZ",
											"maxX2 = maxX, maxY2 = maxY, maxZ2 = maxZ",
										")",

										"seed = seed.newSeed(if (iterX >= midX: minX2 = midX 1) else (maxX2 = midX 2))",
										"seed = seed.newSeed(if (iterY >= midY: minY2 = midY 3) else (maxY2 = midY 4))",
										"seed = seed.newSeed(if (iterZ >= midZ: minZ2 = midZ 5) else (maxZ2 = midZ 6))",

										"int*(",
											"sizeX = bias(seed := seed.newSeed(), maxX2 - minX2 + 1)",
											"sizeY = bias(seed := seed.newSeed(), maxY2 - minY2 + 1)",
											"sizeZ = bias(seed := seed.newSeed(), maxZ2 - minZ2 + 1)",

											"minX3 = (seed := seed.newSeed()).nextInt(minX2, maxX2 - sizeX + 1)",
											"minY3 = (seed := seed.newSeed()).nextInt(minY2, maxY2 - sizeY + 1)",
											"minZ3 = (seed := seed.newSeed()).nextInt(minZ2, maxZ2 - sizeZ + 1)",

											"maxX3 = minX3 + sizeX",
											"maxY3 = minY3 + sizeY",
											"maxZ3 = minZ3 + sizeZ",
										")",

										"if (",
											"iterX.isBetween[minX3, maxX3] &&",
											"iterY.isBetween[minY3, maxY3] &&",
											"iterZ.isBetween[minZ3, maxZ3]",
										":",
											"minX = minX3",
											"minY = minY3",
											"minZ = minZ3",
											"maxX = maxX3",
											"maxY = maxY3",
											"maxZ = maxZ3",
										")",
										"else (",
											"return(null)",
										")",
									")",
									"(seed := seed.newSeed()).switch (",
										"'minecraft:stone',",
										"'minecraft:cobblestone',",
										"'minecraft:deepslate[axis=y]',",
										"(seed := seed.newSeed()).switch (",
											"'minecraft:andesite',",
											"'minecraft:diorite',",
											"'minecraft:granite',",
											"'minecraft:calcite',",
											"'minecraft:dripstone_block',",
											"'minecraft:tuff',",
											"'minecraft:netherrack',",
											"'minecraft:nether_bricks',",
											"'minecraft:red_nether_bricks',",
											"'minecraft:end_stone',",
											"'minecraft:purpur_block',",
											"'minecraft:basalt[axis=y]',",
											"'minecraft:blackstone'",
										"),",
										"BlockTag(        'c:ores'  ).random(seed := seed.newSeed()).getDefaultState(),",
										"BlockTag('minecraft:logs'  ).random(seed := seed.newSeed()).getDefaultState(),",
										"BlockState(BlockTag('minecraft:leaves').random(seed := seed.newSeed()), persistent: true, distance: 7, waterlogged: false),",
										"(seed := seed.newSeed()).switch (",
											"'minecraft:sand',",
											"'minecraft:sandstone',",
											"'minecraft:red_sand',",
											"'minecraft:red_sandstone',",
											"'minecraft:dirt',",
											"'minecraft:coarse_dirt',",
											"'minecraft:grass_block',",
											"'minecraft:podzol',",
											"'minecraft:mycelium',",
											"'minecraft:crimson_nylium',",
											"'minecraft:warped_nylium',",
											"'bigglobe:ashen_netherrack',",
											"'bigglobe:overgrown_sand',",
											"'bigglobe:overgrown_podzol',",
											"'minecraft:gravel',",
											"'minecraft:clay',",
											"'minecraft:mud',",
											"'minecraft:soul_sand',",
											"'minecraft:soul_soil'",
										"),",
										"(seed := seed.newSeed()).switch (",
											"'minecraft:obsidian',",
											"'minecraft:glowstone',",
											"'minecraft:shroomlight',",
											"'minecraft:amethyst_block',",
											"'minecraft:prismarine',",
											"'bigglobe:crystalline_prismarine'",
										")",
									")",
								")",

								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(1,  x        >> 10,  y        >> 10,  z        >> 10), 8,  x        & 1023,  y        & 1023,  z        & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(2, (x + 512) >> 10,  y        >> 10,  z        >> 10), 8, (x + 512) & 1023,  y        & 1023,  z        & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(3,  x        >> 10, (y + 512) >> 10,  z        >> 10), 8,  x        & 1023, (y + 512) & 1023,  z        & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(4, (x + 512) >> 10, (y + 512) >> 10,  z        >> 10), 8, (x + 512) & 1023, (y + 512) & 1023,  z        & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(5,  x        >> 10,  y        >> 10, (z + 512) >> 10), 8,  x        & 1023,  y        & 1023, (z + 512) & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(6, (x + 512) >> 10,  y        >> 10, (z + 512) >> 10), 8, (x + 512) & 1023,  y        & 1023, (z + 512) & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(7,  x        >> 10, (y + 512) >> 10, (z + 512) >> 10), 8,  x        & 1023, (y + 512) & 1023, (z + 512) & 1023, 0, 0, 0, 1024, 1024, 1024) ?:",
								"test((worldSeed # 16x6BE3C62531E4C69FUL).newSeed(8, (x + 512) >> 10, (y + 512) >> 10, (z + 512) >> 10), 8, (x + 512) & 1023, (y + 512) & 1023, (z + 512) & 1023, 0, 0, 0, 1024, 1024, 1024)"
							]
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"minecraft:overworld": {
			"type": "bigglobe:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"reload_preset": "experiments",
				"reload_dimension": "minecraft:overworld",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -1024,
					"max_y":  1024,
					"sea_level": -256
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:stone'",
							"valid": {
								"max_y": "int(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/mountain_thickness`) + 1"
							},
							"after_children": [
								"int maxStone = int(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/mountain_thickness`)",
								"unless (getBlockState(maxStone).isAir():",
									"int depth = int(`bigglobe:paradise/warp_radius` * 8.0L - `bigglobe:paradise/spiral` * 0.125L + columnSeed(16x0FAC920156B86F94UL).nextDouble(-2.0L, 2.0L) - 4.0L)",
									"if (depth > 0:",
										"int minStone = getBottomOfSegment(maxStone)",
										"setBlockState(maxStone, 'minecraft:grass_block[snowy=false]')",
										"if (depth > 1:",
											"setBlockStates(max(maxStone - depth, minStone), maxStone, 'minecraft:dirt')",
										")",
									")",
								")"
							],
							"children": [
								{
									"type": "simple_2d",
									"state": "'minecraft:air'",
									"valid": {
										"where": "isNotNaN(`bigglobe:paradise/bubble_thickness`)",
										"min_y": "int(`bigglobe:paradise/mountain_center` - 256.0L - `bigglobe:paradise/bubble_thickness`)",
										"max_y": "int(`bigglobe:paradise/mountain_center` - 256.0L + `bigglobe:paradise/bubble_thickness`) + 1"
									},
									"children": [
										{
											"type": "simple_2d",
											"state": "'minecraft:water[level=0]'",
											"valid": {
												"max_y": "-256"
											}
										}
									]
								}
							]
						},
						{
							"type": "simple_3d",
							"state": "'bigglobe:cloud'",
							"condition": "`bigglobe:paradise/upper_ring_cloud_sdf` > 0.0I",
							"valid": {
								"where": [
									"if (hints.usage ==. 'heightmap': return(false))",
									"`bigglobe:paradise/warp_radius`.isBetween(`bigglobe:paradise/ring_cloud_min_radius`, `bigglobe:paradise/ring_cloud_max_radius`)"
								],
								"min_y": " ceilInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/ring_cloud_center_offset` - `bigglobe:paradise/ring_cloud_thickness`)",
								"max_y": "floorInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/ring_cloud_center_offset` + `bigglobe:paradise/ring_cloud_thickness`)"
							}
						},
						{
							"type": "simple_3d",
							"state": "'bigglobe:cloud'",
							"condition": "`bigglobe:paradise/upper_bridge_cloud_sdf` > 0.0I",
							"valid": {
								"where": [
									"if (hints.usage ==. 'heightmap': return(false))",
									"`bigglobe:paradise/warp_radius` > `bigglobe:paradise/bridge_cloud_min_radius`"
								],
								"min_y": " ceilInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/bridge_cloud_center_offset` - `bigglobe:paradise/bridge_cloud_thickness`)",
								"max_y": "floorInt(`bigglobe:paradise/mountain_center` + `bigglobe:paradise/bridge_cloud_center_offset` + `bigglobe:paradise/bridge_cloud_thickness`)"
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [
						"bigglobe:overworld/cobblestone_sprinkle",
						"bigglobe:overworld/rock_layers/rocks",
						"bigglobe:overworld/rock_layers/dirt"
					],
					"raw": "bigglobe:paradise/raw_root",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		},
		"bigglobe:external": {
			"type": "minecraft:overworld",
			"generator": {
				"type": "bigglobe:scripted",
				"reload_preset": "experiments",
				"reload_dimension": "bigglobe:external",
				"biome_source": {
					"type": "minecraft:fixed",
					"biome": "minecraft:plains"
				},
				"height": {
					"min_y": -64,
					"max_y": 320
				},
				"layer": {
					"state": "'minecraft:air'",
					"children": [
						{
							"type": "simple_2d",
							"state": "'minecraft:stone'",
							"valid": {
								"max_y": [
									"ExternalImage image = 'bigglobe:hi'",
									"ExternalData data = 'bigglobe:spire'",
									"max(",
										"image.(x % image.width, z % image.height).redI,",
										"data.getByte((z & 15) << 4 | (x & 15)) & 255",
									")"
								]
							}
						}
					]
				},
				"feature_dispatcher": {
					"rock_replacers": [],
					"raw": "bigglobe:noop",
					"normal": "bigglobe:noop"
				},
				"overriders": "bigglobe:empty"
			}
		}
	}
}