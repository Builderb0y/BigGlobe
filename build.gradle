plugins() {
	id('fabric-loom') version('1.7-SNAPSHOT')
	//id('maven-publish')
}

version = project.mod_version
group   = project.maven_group

sourceSets() {
	main() {
		java() {
			srcDirs = Arrays.asList(file("src/main/versions/${project.minecraft_version}/java").listFiles())
			//srcDir(file("src/main/java_${project.minecraft_version}"))
		}
		resources() {
			srcDirs = Arrays.asList(file("src/main/versions/${project.minecraft_version}/resources").listFiles())
			//srcDir(file("src/main/resources_${project.minecraft_version}"))
		}
	}
}

repositories() {
	//Add repositories to retrieve artifacts from in here.
	//You should only use this when depending on other mods because
	//Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	//See https://docs.gradle.org/current/userguide/declaring_repositories.html
	//for more information about repositories.

	mavenLocal() //AutoCodec

	maven() {
		name('Modrinth')
		url('https://api.modrinth.com/maven')
		content() {
			includeGroup('maven.modrinth')
		}
	}

	//manifold
	maven() {
		url('https://oss.sonatype.org/content/repositories/snapshots/')
	}
}

dependencies() {
	minecraft("com.mojang:minecraft:${ project.minecraft_version }")
	if (project.minecraft_version == '1.19.2') {
		mappings(fileTree('mapping'))
	}
	else {
		mappings("net.fabricmc:yarn:${ project.yarn_mappings }:v2")
	}
	modImplementation("net.fabricmc:fabric-loader:${ project.loader_version }")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${ project.fabric_version }")

	testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.0-M1')
	testImplementation('org.junit.jupiter:junit-jupiter-engine:5.3.0-M1')

	String AUTO_CODEC_VERSION = '4.12.1'
	implementation("builderb0y:autocodec:$AUTO_CODEC_VERSION") {
		transitive = false //don't include different version of DFU than what minecraft uses.
	}
	include("builderb0y:autocodec:$AUTO_CODEC_VERSION")
	if (project.minecraft_version == '1.19.2') {
		String JOML_VERSION = '1.10.4'
		implementation("org.joml:joml:$JOML_VERSION")
		include("org.joml:joml:$JOML_VERSION")
	}

	modCompileOnly   (fileTree(file("dependencies/$project.minecraft_version/compileOnly"   )))
	modImplementation(fileTree(file("dependencies/$project.minecraft_version/implementation")))
	modRuntimeOnly   (fileTree(file("dependencies/$project.minecraft_version/runtimeOnly"   )))

	annotationProcessor('systems.manifold:manifold-preprocessor:2024.1.32')
}

compileJava() {
	options.compilerArgs.add('-Xplugin:Manifold')
}

processResources() {
	inputs.property('version', project.version)
	filteringCharset('UTF-8')

	filesMatching('fabric.mod.json') {
		expand('version': project.version, 'mc_version': project.minecraft_version)
	}
}

loom() {
	accessWidenerPath = file("src/main/versions/${project.minecraft_version}/resources/core/bigglobe.accesswidener")
}

static int compareVersions(String versionA, String versionB) {
	String[] splitA = versionA.split('\\.')
	String[] splitB = versionB.split('\\.')
	for (int index = 0; index < 3; index++) {
		int compare = Integer.compare(
			Integer.parseInt(splitA[index]),
			Integer.parseInt(splitB[index])
		)
		if (compare != 0) return compare
	}
	return 0
}

def targetJavaVersion = compareVersions(project.minecraft_version, '1.20.5') >= 0 ? 21 : 17
tasks.withType(JavaCompile).configureEach() {
	//ensure that the encoding is set to UTF-8, no matter what the system default is
	//this fixes some edge cases with special characters not displaying correctly
	//see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	//If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	it.options.compilerArgs.add('-parameters')
}

java() {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	//Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	//if it is present.
	//If you remove this line, sources will not be generated.
	//withSourcesJar()
	sourceCompatibility = JavaLanguageVersion.of(17)
	targetCompatibility = JavaLanguageVersion.of(targetJavaVersion)
}

jar() {
	exclude('assets/bigglobe/icon_1440x.png') //big file that isn't even used.
	exclude('assets/bigglobe/icon_256x_pride.gif') //also not used except as my discord server icon.
}

task copyToReleases(type: Copy) {
	dependsOn(remapJar)
	from("$projectDir/build/libs") {
		include("$archivesBaseName-${project.version}.jar")
		rename() {
			"$archivesBaseName-$project.version-MC${minecraft_version}.jar"
		}
	}
	into(file("releases/${project.version.toString().replace('.' as char, '/' as char)}"))
}

test() {
	useJUnitPlatform()
	doFirst() {
		if (file("releases/${project.version.toString().replace('.' as char, '/' as char)}/$archivesBaseName-$project.version-MC${minecraft_version}.jar").exists()) {
			throw new IllegalStateException("Release file $project.version-MC$minecraft_version already exists. If you intend to overwrite this file, delete it first. Otherwise, you probably forgot to bump the version.")
		}
	}
}

build() {
	dependsOn(copyToReleases)
}

class Version {

	int major
	int minor

	Version(int major, int minor) {
		this.major = major
		this.minor = minor
	}

	static String pad(int number) {
		return number < 10 ? "0$number" : number.toString()
	}

	String shorthand() {
		return "1${pad(major)}${pad(minor)}"
	}

	String longhand() {
		return "1.${major}.${minor}"
	}
}

Collection<Map.Entry<String, String>> loadProperties(String fileName) {
	Properties properties = new Properties()
	try (InputStream stream = new FileInputStream(file(fileName))) {
		properties.load(stream)
	}
	return properties.entrySet()
}

Map<String, String> loadVersion(Version version) {
	return (
		new HashMap<String, String>()
		.putAll(loadProperties('gradle_common.properties'))
		.putAll(loadProperties("gradle_${version.longhand()}.properties"))
	)
}

//this is the dumbest thing I've ever done with gradle.
//its sole purpose is to display the current
//version in the gradle window in intellij.
tasks.register("Current version = $project.minecraft_version") {
	group('versions')
	doFirst() {
		println("Current version = $project.minecraft_version")
	}
}

for (Version version in [
	new Version(20, 1),
	new Version(20, 2),
	new Version(20, 4),
	new Version(20, 6),
	new Version(21, 1)
]) {
	Version capturedVersion = version
	tasks.register("Switch to ${capturedVersion.longhand()}", WriteProperties) {
		group('versions')
		destinationFile = file('gradle.properties')
		comment('This file was automatically generated by gradle. Do not touch!')
		properties(loadVersion(capturedVersion))
		doLast() {
			file('build.properties').text = (
"""#This file was automatically generated by gradle. Do not touch!
MC_1_20_0=12000
MC_1_20_1=12001
MC_1_20_2=12002
MC_1_20_3=12003
MC_1_20_4=12004
MC_1_20_5=12005
MC_1_20_6=12006
MC_1_21_0=12100
MC_1_21_1=12101
MC_VERSION=${capturedVersion.shorthand()}"""
			)
		}
	}
}

/*
// configure the maven publication
publishing() {
	publications() {
		mavenJava(MavenPublication) {
			from(components.java)
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories() {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
*/