plugins() {
	id('fabric-loom') version('1.1-SNAPSHOT')
	//id('maven-publish')
}

version = project.mod_version
group   = project.maven_group

repositories() {
	//Add repositories to retrieve artifacts from in here.
	//You should only use this when depending on other mods because
	//Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	//See https://docs.gradle.org/current/userguide/declaring_repositories.html
	//for more information about repositories.

	mavenLocal() {
		//todo: figure out how to load AutoCodec in a more convenient way for other developers.
		url("file:///home/builderb0y/Documents/Projects/AutoCodec/releases")
		content() {
			includeGroup('builderb0y')
		}
	}

	maven() {
		name('Modrinth')
		url('https://api.modrinth.com/maven')
		content() {
			includeGroup('maven.modrinth')
		}
	}
}

dependencies() {
	minecraft("com.mojang:minecraft:${ project.minecraft_version }")
	mappings("net.fabricmc:yarn:${ project.yarn_mappings }:v2")
	modImplementation("net.fabricmc:fabric-loader:${ project.loader_version }")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${ project.fabric_version }")

	testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.0-M1')
	testImplementation('org.junit.jupiter:junit-jupiter-engine:5.3.0-M1')

	String AUTO_CODEC_VERSION = '4.9.8'
	implementation("builderb0y:autocodec:$AUTO_CODEC_VERSION")
	include("builderb0y:autocodec:$AUTO_CODEC_VERSION")

	modCompileOnly(fileTree(file('dependencies/compileOnly')))
	modImplementation(fileTree(file('dependencies/implementation')))
	modRuntimeOnly(fileTree(file('dependencies/runtimeOnly')))

	//optimizations.
	modRuntimeOnly('maven.modrinth:lazydfu:0.1.3')
	modRuntimeOnly('maven.modrinth:sodium:mc1.19.4-0.4.10')
	modRuntimeOnly('maven.modrinth:lithium:mc1.19.4-0.11.1')
	modRuntimeOnly('maven.modrinth:starlight:1.1.1+1.19')
	modRuntimeOnly('maven.modrinth:ferrite-core:5.2.0-fabric')

	//tweaks.
	modRuntimeOnly('maven.modrinth:logical-zoom:0.0.19')
	modRuntimeOnly('maven.modrinth:screenshot-to-clipboard:1.0.9+fabric')
	modRuntimeOnly('maven.modrinth:dcwa:4.0')
}

compileJava() {
	options.compilerArgs.add('-parameters')
}

processResources() {
	inputs.property('version', project.version)
	filteringCharset('UTF-8')

	filesMatching('fabric.mod.json') {
		expand('version': project.version)
	}
}

loom() {
	accessWidenerPath = file('src/main/resources/bigglobe.accesswidener')
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach() {
	//ensure that the encoding is set to UTF-8, no matter what the system default is
	//this fixes some edge cases with special characters not displaying correctly
	//see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	//If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java() {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	//Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	//if it is present.
	//If you remove this line, sources will not be generated.
	//withSourcesJar()
}

jar() {
	exclude('assets/bigglobe/icon_1440x.png') //big file that isn't even used.
	exclude('wip/**')
}

task copyToReleases(type: Copy) {
	dependsOn(jar)
	from("$projectDir/build/libs") {
		include("$archivesBaseName-${project.version}.jar")
		rename() {
			"$archivesBaseName-$project.version-MC${minecraft_version}.jar"
		}
	}
	into(new File("$projectDir/releases"))
}

build.dependsOn(copyToReleases)

// configure the maven publication
/*
publishing() {
	publications() {
		mavenJava(MavenPublication) {
			from(components.java)
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories() {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
*/