bugs:
	geode spikes can still spawn outside of geodes.
	after teleporting to a new world, some world-specific commands show suggestions from the old world.
		this is probably a minecraft bug, but I haven't looked at it in a huge amount of detail yet.
	fabric has a memory leak.
		the MinecraftServer is stored in ServerConfigurationNetworkAddon,
		which is stored in GlobalReceiverRegistry.trackedAddons,
		which is stored in ServerNetworkingImpl.CONFIGURATIONS.
	fabric fails to upgrade big globe worlds.
		TaggedChoiceTypeMixin cancels a method with a Codec,
		despite the fact that minecraft changed to using a MapCodec instead.

testing:
	cubic chunks compatibility, whenever that's released.
	compatibility with chunk pre-generator mods.
		"chunky" is the one reported to me, and apparently it either
		uses up a stupid amount of RAM, or has a memory leak.
	check if biome tint hook is being called from an expected caller with sodium.
		in other words, see if my mixin is still necessary or not.
	test all hyperspace renderers (waypoints and dimension) with iris shader packs.
	see if DH world generator can cache columns or not.
		maybe even re-use the cache of the non-DH chunk generator.

1.21 stuff:
	verify that all crafting recipes that use tags in any way still work in old MC versions.

where I left off:
	check if I can or should make delegating structures not spawn outside of big globe worlds.
	some way to allow scripts to fill a full 3D range of values, rather than one Y level at a time.

changelog:
	Changes for regular players:
	* There is now only one seed per world. In older 4.x versions, there were actually two seeds; one derived from the other. This was a dumb decision in retrospect, and I'm fixing it now. Unfortunately, fixing this comes at a cost:
		* The overall shape of terrain should be the same as in older versions.
		* Ores and rock layers will probably be different, and have mismatches on the border of previously generated chunks.
		* Bedrock, random cobblestone in the ground, and the blocks in the core gradient will generate at different positions in this new version compared to old versions, even if you used the same seed in both versions. But you probably won't notice because it's completely random anyway.
		* Features like trees might spawn differently or in different places, but this might also depend on which direction you approached the chunk from in the first place, and these will not be cut off at the border between old chunks and new chunks, so you probably won't notice this either.
		* Structures like mineshafts or geodes might spawn differently or in different places, and *might* be cut off at the border between old chunks and new chunks, depending on the structure in question.
	* Fixed bug where 3D noise would sometimes not use the world seed at all (either of them).
		* This affects void clouds, the core, and the deep dark. These will have mismatches on the border of previously generated chunks.
	* Fixed animals not spawning during worldgen.
	* Added frozen and sandy cave themes.
		* Existing cave systems will have mismatches on the border between old chunks and new chunks.
	* Void clouds now avoid generating too close to end cities.
	* Made ancient cities less common.
		* I don't actually know how this will affect any ancient cities that are near the border between old chunks and new chunks. You might get overlapping cities, cities that are cut-off, or cities that spawn normally.
	* Fixed some surface structures sometimes spawning where they shouldn't.
	* Possibly sped up script compilation somewhat.
	Changes for data pack makers:
	* Added `multi_state_3d` and `scripted` layer types.
	* Added derivative grids. These compute analytical derivatives of noise for you.
	* More scripts now have access to grids declared in the `/data/modid/bigglobe_noise_sources/` folder.
		* The benefit of this is that you can sample them with arbitrary seeds and at arbitrary locations, not just the seed and position of the current column.
		* Column entry scripts are not included in this, because I need to figure out how to implement try/finally in runtime-generated bytecode first.
	* Added higherInt(), higherLong(), lowerInt(), and lowerLong() functions for scripts.
	* Added multi-declaration blocks for scripts.
	* Added cast-and-compare operators for scripts.
	* Column values can now reference other column values in the same folder or sub-folders more easily.
	* The "Reload Big Globe chunk generators from mod jar" config option was removed, and now acts as if it's always enabled.
		* If you are making a world preset, you must remove the "reload_dimension" property from your scripted chunk generators, or else they will be overridden by the default ones.
	* All types of scripts which have a "seed" variable exposed will now always get the same value from it for the same world. This is very much related to the fact that worlds only have one seed now.

alternate world presets:
	paradise.
	islands.

4.0 stuff:
	ore features that can place more than one block state randomly.
	/waypoint
		add <x y z> <dimension> <owner>
		remove <id>
		query
			owner <owner>
			in <dimension>
			near <x y z>
	fully immutable NBT elements for scripts.
	option to specify that a noise column entry should use the hashed world seed,
		not the seed that's been xor'd with the permutation of the entry's ID.
		or better yet, a "salt" field.
	need to redo scripted noise which uses column values.
	better error messages for referencing a column value which is enabled by a different voronoi settings,
		or any voronoi settings in a root column context.
	cave-exposed trail ruins at -1324.62 105.88 1666.20
		decide if I want to keep these, or make a cave exclusion rule for them.
		surface-exposed one at 1255.57 212.21 -1583.85
			another one at 2514.28 474.17 48.03
			third one at 1665.50 449.97 17.77
			decide if I want a surface_y overrider for them,
			or a structure overrider which prevents them from spawning in hilly or river-y areas.
	remove BoundInfo.
	expose Fluid and FluidState to scripts, remove BlockState.hasWater(), hasLava(), and hasSoulLava() methods.
		add setFluidState() to WorldWrapper which modifies waterlogged property.
		ideally block states and fluid states should be completely separate.
	allow scripts to declare variables with generic types?

3.x stuff:
	ender dragon flys around ring/bridge clouds when they're directly above the main end island.
		add exclusion to remove ring and bridge clouds from above the main end island.
	verify that snow still can't spawn on beaches.
		I may have the order of operations wrong in OverworldColumn.computeSnowHeight().
		it may need to compute snowChance *after* accounting for sea level, not before.
	fix snow stripes, now that I know how to do that.
	do not calculate counts manually in SectionGenerationContext, as this will conflict with lithium.
		call vanilla method instead.
	remove ability for scripts to print things on the client in multiplayer.
	make coral only spawn where temperature is high.
	make nether ores not require a biome field.
	need end ores and end rock layers.
	fix seed.newSeed(int) not using the original seed to compute the new seed.
	fix dungeon chests always facing the same direction.
		missing override for SymmetricCoordinator.setBlockStateAndBlockEntity()
	fix surface mineshafts spawning in biomes in the "well" tag.
	check if inverse() is necessary in SymmetricOffset.rotate().
		it isn't in 4.0, and in fact breaks things there.
	check if dead bushes spawn on beaches in non-temperate plains areas, and prevent them from doing so.
	BigGlobeChunkGenerator$StructureFinder incorrectly specifies Y = 0 for returned BlockPos.
		this is fine for the /locate command, but breaks eyes of ender.
	make rocks break ice in addition to glass.
	fix semicolons counting as an operator character for scripts.
	remove bastion remnant loot tables from portal temple.
	fix sign() not working with longs due to copy-paste error in MathScriptEnvironment.
	add Block.id to MinecraftScriptEnvironment.
	add Tag class to MinecraftScriptEnvironment.
	add Tag.id to MinecraftScriptEnvironment.
	fix duplicate Block.getRandomState() function in MinecraftScriptEnvironment.
	biomes need en_us.json lang entries apparently.
		format is biome.bigglobe.(name).
	add mixins for ServerWorld.getSeaLevel() to delegate to chunk generator in big globe worlds.
	ensure that cave floor features can't replace snow.
	fix random.switch() using implicit random instead of explicit random in RandomScriptEnvironment.
	see if waterfalls need fixing due to typo of +1 becoming -1 in loop bounds.
	disable raids in end dimension.
	items might not be added to creative menu in 1.19.2.
	fix networking code to decode on network thread and process on main thread.
	fix "group": "GROUP" in slingshot recipe.
	add expanded_ecosphere to "breaks" section in fabric.mods.json.

AutoCodec:
	log when extra data is provided that isn't a field of the object being deserialized.
	investigate imprinters.
		SerializableScriptInputs failed to have a coder created for the imprinter path.
	allow RecordDecoder to provide DecodeContext to constructors which need it.

scripting:
	if a script template input declares a function and the template uses $INPUT more than once, this will probably cause problems.
	use script debug name in print().
	SwitchInsnTree needs to manage its case scopes more manually.
	expose arrays.
	scriptable RandomSource?
	general-purpose script bytecode optimization framework.
		more sophisticated flow analysis to see what values could be where at any given time?
			could help with more advanced constant jumps?
		more sophisticated back-tracking algorithm for pop removal?
		remove unnecessary parameters for user-defined functions.
	more invoke syntaxes:
		non-null invoke?
			foo.!bar() requires that bar() return a non-null value.
		nullable non-null invoke?
			foo.?!bar() makes a choice:
				if foo is null, then the result is null and bar() is not invoked.
				if foo is non-null, then bar() is invoked and is required to return a non-null value.
	lambdas?
		Stream API?
			ability to iterate over a Stream (whenever Stream support is added).
	add copy constructor and clone() for user-defined classes.
		clone() is deep copy, constructor is shallow copy?
			this is the more intuitive option, but it is more difficult to implement.
			due to the fact that you can't assign to final fields inside clone().
			not that I have final fields yet, but still.
	smarter detection of which variables are captured by methods.
		don't capture variables which aren't used.
	inline getters and setters for user-defined classes.
	scriptable loot tables.
	scriptable advancements?
	swap() keyword?
		swaps 2 local variables.
			does not work on arguments that aren't local variables.
		then again, you can also just use a = b =: a instead.
	.= operator, along with :. and .:
		applies a function to the lvalue and stores it in the lvalue.
		example usage: value .= abs
		more advanced usage:
			class Empty()
			int Empty.increment(int value: value + 1)
			Empty empty = new()
			value .= empty.increment
	make fields on InsnTree's final.
	make it so that constant template inputs remain constants without being turned into variables.
	Type?(expression)
		attempts to cast the expression to Type, but returns null if this fails for any reason.
		can be chained with ?:
		might also need to make "as" into a keyword too so I can do .as?(Type)

features:
	general:
		advancements for finding things?
		all the todos scattered throughout my code.
		BlockQueue should not use longs for internal storage, as this won't work with cubic chunks.
		make charred hanging sign look a bit more programmer art-y?
		look into a custom loader for scripted configured features that doesn't rely on json format.
		deprecate TagOrObject, just use RegistryEntryList for both, since apparently it can do that.
		fast DH tree generation
			skips a lot of the more expensive work for tree generation,
			and replaces trees with blobs of leaves with a trunk and no branches.
		make delayed generation features place blocks inside the mutable area immediately for DH chunks.
	overworld:
		alternate curvy shape for biome distribution which compensates for distribution of noise.
		desert fossils.
		fallen logs.
		allow flowers to place a Feature for every flower.
		glaciers:
			snow/ice castle structure?
		trees:
			roots.
				use for mangrove trees.
		cave biomes:
			lush:
				walls:
					vines.
			mushroom:
				glowing mushrooms?
					that hang from the ceiling?
		make geode placement faster by only computing noise in a sphere instead of a cube.
		more types of geodes/more colors of pretty crystals?
		make underground pocket placement faster by only computing noise in a circle instead of a square.
		dungeons:
			piles of gold?
			occasional "big rooms".
		make lilypads renewable?
		sandstone house variants?
			generify WoodPalette into BlockPalette?
				with "type": "wood" or "type": "generic"?
		sea shells on the sea shore?
		clams?
			pearls?
				potion ingredient?
				armor trim?
		wet sand?
			does not have gravity.
			on random tick, if not adjacent to water, turn into regular sand.
				don't cause block updates in the process, and also don't fall due to gravity.
			obtainable? TBD.
			craftable with sand and water buckets? TBD.
		boulder block.
	end:
		asteroids in the void biome.
		ender clam?
			source of ender pearls.

before release:
	make sure nothing in test package is used.
	disable BigGlobeItems.TEST_ITEM.
	ensure BigGlobeChunkGenerator.WORLD_SLICES is set to false.
	make sure SerializableBlockQueue.DEBUG_ALWAYS_SERIALIZE is set to false.

porting to newer MC versions:
	check if ShapedRecipe implements serialization yet.
		if it does, re-enable code to dump recipes in DumpRegistriesCommand.