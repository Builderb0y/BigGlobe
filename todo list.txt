bugs:
	geode spikes can still spawn outside of geodes.
	creating a world with the custom time speed gamerule either doesn't get setup properly, or doesn't sync to clients properly.
		this is a fabric bug.
	after teleporting to a new world, /bigglobe:locateVoronoi shows suggestions from the old world.
		this is probably a minecraft bug, but I haven't looked at it in a huge amount of detail yet.
	Tripwire is triggered for some chunks not containing a ChunkOfColumns when they should.
		this is caused by distant horizons constructing a new chunk every time you request one.

testing:
	cubic chunks compatibility, whenever that's released.
	compatibility with chunk pre-generator mods.
		"chunky" is the one reported to me, and apparently it either
		uses up a stupid amount of RAM, or has a memory leak.

porting:

where I left off:

changelog:

AutoCodec:
	log when extra data is provided that isn't a field of the object being deserialized.
	logging for Field/MethodPredicate?
	better handling of default objects:
		@DefaultGet: gets an object from a field or method.
			field can be of type T_Decoded or AutoDecoder<T_Decoded>.
			method can have a return type of T_Decoded or AutoDecoder<T_Decoded>.
			method can take a DecodeContext<T_Encoded> as a parameter, or nothing as a parameter.
			this could also target a constructor.
	builtin framework for key dispatching.
	VerifyNullable.INSTANCE should override toString().
	investigate imprinters.
		SerializableScriptInputs failed to have a coder created for the imprinter path.
	@EncodeOnly and @DecodeOnly
		DecodeOnly could be useful for backwards compatibility.
		maybe EncodeOnly could be used to add comments or something to encoded data?
			maybe this can be combined with pseudo-fields to not store the comment in an actual field per-object?

scripting:
	SwitchInsnTree needs to manage its case scopes more manually.
	expose arrays.
	scriptable RandomSource?
	scripted structure layouts should be able to construct jigsaw structure pieces.
	general-purpose script bytecode optimization framework.
	expose voronoi information.
		include cave systems, cavern systems, skylands, and nether biome.
	nested multi-line comment ;(example ;(text) here)
	operators for !> !< !>= and !<= to negate the normal compare operators.
		semantics differ from inverting for NaN handling.
	more invoke syntaxes:
		nullable invoke.
			foo.?bar()
		receiver invoke.
			foo.<bar() returns foo, not the return value of bar().
			add setters to user-defined classes. they could make use of this.
		nullable receiver invoke?
			foo.?<bar() or foo.<?bar()? should both be accepted?
		non-null invoke?
			foo.!bar() requires that bar() return a non-null value.
		nullable non-null invoke?
			foo.?!bar() makes a choice:
				if foo is null, then the result is null and bar() is not invoked.
				if foo is non-null, then bar() is invoked and is required to return a non-null value.
	lambdas?
		Stream API?
	List.shuffle()
	add copy constructor and clone() for user-defined classes.
		clone() is deep copy, constructor is shallow copy?
			this is the more intuitive option, but it is more difficult semantically
			due to the fact that you can't assign to final fields inside clone().
			not that I have final fields yet, but still.
	cache scripts.
	for (int x in [0, 10) % step: body)
		how to handle descending iteration?
	smarter detection of which variables are captured by methods.
		don't capture variables which aren't used.

features:
	general:
		advancements for finding things?
		all the todos scattered throughout my code.
		BlockQueue should not use longs for internal storage, as this won't work with cubic chunks.
		make charred hanging sign look a bit more programmer art-y?
		look into a custom loader for scripted configured features that doesn't rely on json format.
	overworld:
		alternate curvy shape for biome distribution which compensates for distribution of noise.
		dynamic registry for overriders?
		configurable bedrock amount.
		desert fossils.
		fallen logs.
		column values for cliff frac and cliff bias.
		allow flowers to place a Feature for every flower.
		ice spikes.
		glaciers.
		log cabin structure?
		slightly larger house structure?
		trees:
			roots.
				use for mangrove trees.
		cave biomes:
			lush:
				walls:
					glow lichen.
					vines.
			mushroom:
				glowing mushrooms?
					that hang from the ceiling?
			frozen?
				floor:
					snow.
					maybe some ice sprinkled in with the snow.
			sandy?
				floor:
					sand.
					sandstone under that.
		make geode placement faster by only computing noise in a sphere instead of a cube.
		more types of geodes/more colors of pretty crystals?
		make underground pocket placement faster by only computing noise in a circle instead of a square.
		dungeons:
			piles of gold?
			occasional "big rooms".
		underground pockets:
			molten? (match molten caves)
			frozen?
			adjust cave exclusion policy to only exclude on the bottom half, and allow intersections on the top half?
		make lilypads renewable?
	nether:
	end:
		block of void?
			void ingots?
				void tools?
				void armor?
		asteroids in the void biome.
		ender clam?
			source of ender pearls.

before release:
	make sure nothing in test package is used.
	disable BigGlobeItems.TEST_ITEM.
	ensure BigGlobeChunkGenerator.WORLD_SLICES is set to false.
	make sure SerializableBlockQueue.DEBUG_ALWAYS_SERIALIZE is set to false.

porting:
	check how ChunkSection counts are used.
		in particular, see if nonEmptyFluidCount is still returned by hasRandomFluidTicks().
		this usage matters for SectionGenerationContext.recalculateCounts().
	see if CactusBlock uses BlockTags.SAND for placement logic.
		if it does, remove mixin for making it placeable on overgrown sand.

back-porting from 1.20 to 1.19.4:
	re-enable lighting update suppression in BlockQueue.
	spelunking rope block needs to override getPistonBehavior() to return DESTROY.
	rope anchor block needs to override getPistonBehavior() to return BLOCK.
	wart_weed and charred_leaves need to use "condition": "alternative" instead of "any_of".
	@VerifyNormal needs to verify that the block does not emit light.
	CactusBlock_AllowPlacementOnOvergrownSand needs to be re-enabled.
	re-enable lighting in SectionGenerationContext.
	remove replaceable_plants block tag and just use Material.PLANT in MaterialVersions instead.
	remove hanging signs and cherry stuff.
		remove hanging signs in WoodPalette.
	SurfaceMaterialDecorationBlock needs to override getPistonBehavior() to return DESTROY.
	"any_of" -> "alternative" entry should specify that this is for loot tables.
	re-enable lighting in BigGlobeChunkGenerator.generateSectionsParallel().
	remove tags/worldgen/biome/has_structure/trail_ruins.
	revert minecraft version dependency in fabric.mod.json.

back-porting from 1.19.4 to 1.19.2:
	remove BiomeDownfallAccessor.
	remove BigGlobeGameRules.SOUL_LAVA_CONVERSION.
	re-add call to BigGlobeDynamicRegistries.addBuiltin() in mod initializer.
	fix SlimeEntity_AllowSpawningFromSpawner.
	fix OceanMonumentGeneratorBase_VanillaBugFixes.
	re-add structureSetRegistry pseudo-field to BigGlobeChunkGenerator.
	revert biomes to re-add precipitation field.