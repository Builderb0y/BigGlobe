bugs:
	geode spikes can still spawn outside of geodes.
	creating a world with the custom time speed gamerule either doesn't get setup properly, or doesn't sync to clients properly.
		this is a fabric bug.
	after teleporting to a new world, /bigglobe:locateVoronoi shows suggestions from the old world.
		this is probably a minecraft bug, but I haven't looked at it in a huge amount of detail yet.
	Tripwire is triggered for some chunks not containing a ChunkOfColumns when they should.
		this is caused by distant horizons constructing a new chunk every time you request one.
	immersive portals places the end portal inside the end nest.
		no, it doesn't. it just doesn't load blocks due to assuming the dimension height matches vanilla.
		this is fixed in a later version of immersive portals.
	fabric has a memory leak.
		the MinecraftServer is stored in ServerConfigurationNetworkAddon,
		which is stored in GlobalReceiverRegistry.trackedAddons,
		which is stored in ServerNetworkingImpl.CONFIGURATIONS.

testing:
	cubic chunks compatibility, whenever that's released.
	compatibility with chunk pre-generator mods.
		"chunky" is the one reported to me, and apparently it either
		uses up a stupid amount of RAM, or has a memory leak.
	check if biome tint hook is being called from an expected caller with sodium.
		in other words, see if my mixin is still necessary or not.

4.0 stuff:
	ender dragon flys around ring/bridge clouds when they're directly above the main end island.
		add exclusion to remove ring and bridge clouds from above the main end island.
	option to specify that a grid column entry should use the hashed world seed,
		not the seed that's been xor'd with the permutation of the entry's ID.
		or better yet, a "salt" field.
	cave noise should be salted with voronoi seed.
	need to redo scripted noise which uses column values.
	missing stuff:
		the rest of the configured features.
		cherry and mangrove trees.
		skylands.
		foliage colors.
		nether and end.
		ores.
		rock layers.
		flowers.
		locate commands.
		detect and report cyclic decision trees and cyclic column value dependencies.
		player spawning.
	re-evaluate if structure locating logic is necessary in chunk generator or not.
	snow can spawn floating above cave entrances.
	find an ocean monument to confirm they spawn correctly.
	voronoi seed seemingly changes across world reloads or game reloads.
		possibly related to loading a data pack with errors in it, fixing those errors, then reloading.
	chest in large dungeon always faces the same direction.
		possibly other sized dungeons too. didn't check.
	cave overriders for dungeons?

3.x stuff:
	ender dragon flys around ring/bridge clouds when they're directly above the main end island.
		add exclusion to remove ring and bridge clouds from above the main end island.
	verify that snow still can't spawn on beaches.
		I may have the order of operations wrong in OverworldColumn.computeSnowHeight().
		it may need to compute snowChance *after* accounting for sea level, not before.
	do not calculate counts manually in SectionGenerationContext, as this will conflict with lithium.
		call vanilla method instead.
	remove ability for scripts to print things on the client in multiplayer.
	make coral only spawn where temperature is high.
	make nether ores not require a biome field.
	need end ores and end rock layers.
	fix seed.newSeed(int) not using the original seed to compute the new seed.

where I left off:

changelog:
	4.0:
		Completely re-designed how chunk generation works: data packs now have full control over which blocks get placed where in the earliest step of raw generation.

AutoCodec:
	log when extra data is provided that isn't a field of the object being deserialized.
	investigate imprinters.
		SerializableScriptInputs failed to have a coder created for the imprinter path.

scripting:
	use script debug name in print().
	SwitchInsnTree needs to manage its case scopes more manually.
	expose arrays.
	scriptable RandomSource?
	general-purpose script bytecode optimization framework.
		more sophisticated flow analysis to see what values could be where at any given time?
			could help with more advanced constant jumps?
		more sophisticated back-tracking algorithm for pop removal?
		remove unnecessary parameters for user-defined functions.
	more invoke syntaxes:
		non-null invoke?
			foo.!bar() requires that bar() return a non-null value.
		nullable non-null invoke?
			foo.?!bar() makes a choice:
				if foo is null, then the result is null and bar() is not invoked.
				if foo is non-null, then bar() is invoked and is required to return a non-null value.
	lambdas?
		Stream API?
			ability to iterate over a Stream (whenever Stream support is added).
	add copy constructor and clone() for user-defined classes.
		clone() is deep copy, constructor is shallow copy?
			this is the more intuitive option, but it is more difficult semantically
			due to the fact that you can't assign to final fields inside clone().
			not that I have final fields yet, but still.
	smarter detection of which variables are captured by methods.
		don't capture variables which aren't used.
	inline getters and setters for user-defined classes.
	scriptable loot tables.
	scriptable advancements?
	swap() keyword?
		swaps 2 local variables.
			does not work on arguments that aren't local variables.
		then again, you can also just use a = b =: a instead.
	.= operator, along with :. and .:
		applies a function to the lvalue and stores it in the lvalue.
		example usage: value .= abs
		more advanced usage:
			class Empty()
			int Empty.increment(int value: value + 1)
			Empty empty = new()
			value .= empty.increment
	make user class declaration into another InsnTree?
	make user method declaration no longer an InsnTree?
	make fields on InsnTree's final.

features:
	general:
		advancements for finding things?
		all the todos scattered throughout my code.
		BlockQueue should not use longs for internal storage, as this won't work with cubic chunks.
		make charred hanging sign look a bit more programmer art-y?
		look into a custom loader for scripted configured features that doesn't rely on json format.
		deprecate TagOrObject, just use RegistryEntryList for both, since apparently it can do that.
		fully programmable chunk generator:
			still need to figure out:
				how to link biome placement to block placement?
				how to sync certain values to the client?
					like height_adjusted_temperature/foliage, for biome colors.
					perhaps all scripts could be synced,
					and the seed in the generator could be strongly hashed for all values?
				how to do flowers in parallel?
					probably just make a Feature class for it.
						config takes Y level script.
				how to handle lava/water in caverns?
					presumably as a layer, but how to choose a random block per-voronoi cell?
		fast DH tree generation
			skips a lot of the more expensive work for tree generation,
			and replaces trees with blobs of leaves with a trunk and no branches.
		make delayed generation features place blocks inside the mutable area immediately for DH chunks.
	overworld:
		lakes and underground pockets still need automatic decorator locations.
		alternate curvy shape for biome distribution which compensates for distribution of noise.
		dynamic registry for overriders?
		desert fossils.
		fallen logs.
		column values for cliff frac and cliff bias.
		allow flowers to place a Feature for every flower.
		glaciers:
			snow/ice castle structure?
		trees:
			roots.
				use for mangrove trees.
		cave biomes:
			lush:
				walls:
					glow lichen.
					vines.
			mushroom:
				glowing mushrooms?
					that hang from the ceiling?
			frozen?
				floor:
					snow.
					maybe some ice sprinkled in with the snow.
			sandy?
				floor:
					sand.
					sandstone under that.
		make geode placement faster by only computing noise in a sphere instead of a cube.
		more types of geodes/more colors of pretty crystals?
		make underground pocket placement faster by only computing noise in a circle instead of a square.
		dungeons:
			piles of gold?
			occasional "big rooms".
		underground pockets:
			molten? (match molten caves)
				maybe just put blackstone inside lava pockets?
			frozen?
			adjust cave exclusion policy to only exclude on the bottom half, and allow intersections on the top half?
			add "center" noise?
		make lilypads renewable?
		sandstone house variants?
			generify WoodPalette into BlockPalette?
				with "type": "wood" or "type": "generic"?
		more decorations for surface mineshafts?
		sea shells on the sea shore?
	nether:
	end:
		end ore feature.
		block of void?
			void ingots?
				void tools?
				void armor?
		asteroids in the void biome.
		ender clam?
			source of ender pearls.
		holes in the surface?

before release:
	make sure nothing in test package is used.
	disable BigGlobeItems.TEST_ITEM.
	ensure BigGlobeChunkGenerator.WORLD_SLICES is set to false.
	make sure SerializableBlockQueue.DEBUG_ALWAYS_SERIALIZE is set to false.

porting to newer MC versions:
	check how ChunkSection counts are used.
		in particular, see if nonEmptyFluidCount is still returned by hasRandomFluidTicks().
		this usage matters for SectionGenerationContext.recalculateCounts().
	check if ShapedRecipe implements serialization yet.
		if it does, re-enable code to dump recipes in DumpRegistriesCommand.