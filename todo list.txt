bugs:
	geode spikes can still spawn outside of geodes.
	creating a world with the custom time speed gamerule either doesn't get setup properly, or doesn't sync to clients properly.
		this is a fabric bug.
	after teleporting to a new world, /bigglobe:locateVoronoi shows suggestions from the old world.
		this is probably a minecraft bug, but I haven't looked at it in a huge amount of detail yet.
	Tripwire is triggered for some chunks not containing a ChunkOfColumns when they should.
		this is caused by distant horizons constructing a new chunk every time you request one.
	immersive portals places the end portal inside the end nest.
		no, it doesn't. it just doesn't load blocks due to assuming the dimension height matches vanilla.
		this is fixed in a later version of immersive portals.

testing:
	cubic chunks compatibility, whenever that's released.
	compatibility with chunk pre-generator mods.
		"chunky" is the one reported to me, and apparently it either
		uses up a stupid amount of RAM, or has a memory leak.

where I left off:

changelog:
	* Added cherry forests (1.20.1 only), swamps, and glaciers.
	* Spread out transition from plains to desert and snow.
	* Fixed ocean monuments being too reluctant to spawn.
	* Fixed torch arrows, rocks, and soul lava buckets not working in dispensers.
	* Changed ore distributions:
		* Less gold and redstone at excessively deep Y levels.
		* Diamonds start spawning higher, but are less common at excessively deep Y levels too.
		* Emeralds can now be found at all Y levels, they just get rarer as you go deeper.
	* Scripting changes:
		* All json scripts can now use templates.
			* Command scripts are still inline-only.
		* Added scripted recipes.
		* Added extension methods.
		* Snow height in the overworld is now scriptable.
		* print() now outputs to in-game chat in singleplayer.
		* Errors encountered during script evaluation are also printed to in-game chat in singleplayer.
		* More consistent order of operations for prefix operators.

AutoCodec:
	log when extra data is provided that isn't a field of the object being deserialized.
	investigate imprinters.
		SerializableScriptInputs failed to have a coder created for the imprinter path.

scripting:
	use script debug name in print().
	SwitchInsnTree needs to manage its case scopes more manually.
	expose arrays.
	scriptable RandomSource?
	general-purpose script bytecode optimization framework.
		more sophisticated flow analysis to see what values could be where at any given time?
			could help with more advanced constant jumps?
		more sophisticated back-tracking algorithm for pop removal?
	more invoke syntaxes:
		non-null invoke?
			foo.!bar() requires that bar() return a non-null value.
		nullable non-null invoke?
			foo.?!bar() makes a choice:
				if foo is null, then the result is null and bar() is not invoked.
				if foo is non-null, then bar() is invoked and is required to return a non-null value.
	lambdas?
		Stream API?
			ability to iterate over a Stream (whenever Stream support is added).
	add copy constructor and clone() for user-defined classes.
		clone() is deep copy, constructor is shallow copy?
			this is the more intuitive option, but it is more difficult semantically
			due to the fact that you can't assign to final fields inside clone().
			not that I have final fields yet, but still.
	smarter detection of which variables are captured by methods.
		don't capture variables which aren't used.
	user-defined methods (not functions) in user-defined classes.
	inline getters and setters for user-defined classes.
	extract user-defined function parsing into its own class.
		potentially make this abstract enough to be useful for user-defined methods too.
	allow for (non-int in range[]:
	scriptable loot tables.
	scriptable advancements?
	extension methods?

features:
	general:
		use float[]'s for arrays (like cave noise).
		advancements for finding things?
		all the todos scattered throughout my code.
		BlockQueue should not use longs for internal storage, as this won't work with cubic chunks.
		make charred hanging sign look a bit more programmer art-y?
		look into a custom loader for scripted configured features that doesn't rely on json format.
		deprecate TagOrObject, just use RegistryEntryList for both, since apparently it can do that.
		fully programmable chunk generator:
			user-defined column values.
				noise inputs.
			user-defined "layers" of blocks to place.
				2D and 3D layers are valid.
				can choose if the layer is uniform or voronoi.
				list of carvers.
					carvers have the same properties (2D vs. 3D, uniform vs. voronoi)
			still need to figure out:
				how to link biome placement to block placement.
				how to optimize bulk block setting.
				how to handle oceans?
		fast DH tree generation
			skips a lot of the more expensive work for tree generation,
			and replaces trees with blobs of leaves with a trunk and no branches.
		make delayed generation features place blocks inside the mutable area immediately for DH chunks.
	overworld:
		lakes and underground pockets still need automatic decorator locations.
		alternate curvy shape for biome distribution which compensates for distribution of noise.
		dynamic registry for overriders?
		desert fossils.
		fallen logs.
		column values for cliff frac and cliff bias.
		allow flowers to place a Feature for every flower.
		glaciers:
			snow/ice castle structure?
		trees:
			roots.
				use for mangrove trees.
		cave biomes:
			lush:
				walls:
					glow lichen.
					vines.
			mushroom:
				glowing mushrooms?
					that hang from the ceiling?
			frozen?
				floor:
					snow.
					maybe some ice sprinkled in with the snow.
			sandy?
				floor:
					sand.
					sandstone under that.
		make geode placement faster by only computing noise in a sphere instead of a cube.
		more types of geodes/more colors of pretty crystals?
		make underground pocket placement faster by only computing noise in a circle instead of a square.
		dungeons:
			piles of gold?
			occasional "big rooms".
		underground pockets:
			molten? (match molten caves)
				maybe just put blackstone inside lava pockets?
			frozen?
			adjust cave exclusion policy to only exclude on the bottom half, and allow intersections on the top half?
			add "center" noise?
		make lilypads renewable?
		sandstone house variants?
			generify WoodPalette into BlockPalette?
				with "type": "wood" or "type": "generic"?
		more decorations for surface mineshafts?
	nether:
	end:
		block of void?
			void ingots?
				void tools?
				void armor?
		asteroids in the void biome.
		ender clam?
			source of ender pearls.
		holes in the surface?

before release:
	make sure nothing in test package is used.
	disable BigGlobeItems.TEST_ITEM.
	ensure BigGlobeChunkGenerator.WORLD_SLICES is set to false.
	make sure SerializableBlockQueue.DEBUG_ALWAYS_SERIALIZE is set to false.

porting:
	check how ChunkSection counts are used.
		in particular, see if nonEmptyFluidCount is still returned by hasRandomFluidTicks().
		this usage matters for SectionGenerationContext.recalculateCounts().